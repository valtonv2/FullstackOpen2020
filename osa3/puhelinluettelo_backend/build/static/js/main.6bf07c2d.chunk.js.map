{"version":3,"sources":["Components/Personform.js","Components/Filterform.js","Components/Person.js","Components/Listofpeople.js","services/Persons.js","Components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Personform","props","onSubmit","addFunction","value","currentName","onChange","nameChangeHandler","currentNum","numChangeHandler","type","Filterform","filterLetters","changeHandler","Person","name","number","deleteFunction","ident","onClick","Listofpeople","list","map","dataItem","key","id","baseUrl","axios","get","then","response","data","newData","post","dataObj","put","delete","Notification","message","isError","className","App","useState","persons","setPersons","useEffect","serverComm","newName","setNewName","newNum","setNewNum","setFilterLetters","announcement","setAnnouncement","setError","event","target","console","log","preventDefault","person","includes","window","confirm","oldObj","find","newObj","updatedPerson","setTimeout","catch","error","filter","newPerson","concat","slice","length","targetPerson","human","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bf07c2d.chunk.js","sourcesContent":[" import React from 'react'\r\n \r\n \r\n const Personform = (props) =>{\r\n\r\n      return(\r\n        <form onSubmit={props.addFunction}>\r\n        <div> name: <input value={props.currentName} onChange = {props.nameChangeHandler}/></div>\r\n        <div> number: <input value = {props.currentNum} onChange = {props.numChangeHandler}/> </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n      )\r\n    }\r\n\r\nexport default Personform"," import React from 'react'\r\n \r\n \r\n const Filterform = (props) =>{\r\n\r\n      return(\r\n      <form>\r\n        <div>Filter shown with <input value = {props.filterLetters} onChange = {props.changeHandler}/></div>\r\n\r\n      </form>\r\n      )\r\n    }\r\n\r\nexport default Filterform","import React from 'react'\r\n\r\nconst Person = ({name, number, deleteFunction, ident}) => {\r\n\r\nreturn( \r\n<div>\r\n<p>{name}  {number}</p> <button onClick={() => deleteFunction(ident)}>Delete</button>\r\n</div>\r\n)\r\n\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\n//Komponentti joka renderöi ihmislistan. \r\nconst Listofpeople = ({list, deleteFunction}) => {\r\n\r\n    return(\r\n    \r\n      <div>{list.map(dataItem => <Person key = {dataItem.name} name = {dataItem.name} number = {dataItem.number} deleteFunction = {deleteFunction} ident = {dataItem.id}/>)}</div>\r\n    \r\n    )\r\n\r\n}\r\n\r\nexport default Listofpeople","import axios from 'axios'\r\n\r\n//const baseUrl = 'https://salty-chamber-83912.herokuapp.com/api/persons'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAllData = () => {\r\n    \r\nreturn(axios.get(baseUrl).then(response => response.data))\r\n\r\n}\r\n\r\n\r\nconst postNewData = newData => {\r\n\r\n    const request = axios.post(baseUrl, newData)\r\n    return request.then(response => response.data)\r\n\r\n}\r\n\r\nconst deleteData = (id) => {\r\n\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n\r\n}\r\n\r\n\r\nconst updateData = (id, dataObj) => {\r\n\r\n   return axios.put(`${baseUrl}/${id}`, dataObj).then(response => response.data)\r\n\r\n}\r\n\r\nexport default {getAllData, postNewData, updateData, deleteData}","import React from 'react'\r\n\r\nconst Notification = ({message, isError}) => {\r\n   \r\n     if(message === null){return null}\r\n   \r\n    else if(!isError){return(\r\n\r\n        <div className = 'Notification'>\r\n            {message}\r\n        </div>\r\n\r\n    )\r\n\r\n    }else return(\r\n\r\n        <div className = 'error'>\r\n            {message}\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Personform from './Components/Personform'\nimport Filterform from './Components/Filterform'\nimport Listofpeople from './Components/Listofpeople'\nimport serverComm from './services/Persons'\nimport Notification from './Components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n\n  useEffect(() => {\n\n    serverComm.getAllData().then(data => setPersons(data))\n    \n\n  }, [])\n\n  const [ newName, setNewName ] = useState('')\n\n  const [newNum, setNewNum] = useState('')\n\n  const [filterLetters, setFilterLetters] = useState('')\n\n  const [announcement, setAnnouncement] = useState(null)\n\n  const [isError, setError] = useState(false)\n\n\n//Tapahtumankäsittelijäetodi joka lisää henkilölistaan uuden ihmisen\n  const addNewPerson = (event) => {\n    \n    event.preventDefault()\n\n    if(!persons.map(person => person.name).includes(newName)){\n    const newObj ={\n     name: newName,\n     number: newNum\n    }\n\n    serverComm.postNewData(newObj).then(newPerson => {\n      setPersons(persons.concat(newPerson))\n      setAnnouncement(`Added ${newObj.name}`)\n\n      setTimeout(() => {setAnnouncement(null)}, 3000)\n    })\n   \n    }else{\n\n      if(window.confirm(`${newName} is already added to phonebook. Do you want to replace the old number with a new one?`)){\n        \n        const oldObj = persons.find(person => person.name === newName)\n        const newObj = {...oldObj, number:newNum}\n        serverComm.updateData(oldObj.id, newObj).then(updatedPerson => {\n          \n          setPersons(persons.map(person =>  person.id !== oldObj.id ? person:updatedPerson))\n        \n          setAnnouncement(`Changed number of ${updatedPerson.name}`)\n          setTimeout(() => {setAnnouncement(null)}, 3000)\n        \n        }).catch(error => {\n          \n          setError(true)\n          setAnnouncement(`Person was already deleted from the phonebook.`)\n          setTimeout(() => {setAnnouncement(null)}, 3000)\n          setTimeout(() => {setError(false)}, 3000)\n\n\n          setPersons(persons.filter(person => person.id !== newObj.id))\n          \n        })\n\n      }else{\n\n        console.log(\"Add cancelled\")\n\n      }\n\n    }\n      \n  }\n \n  //Henkilöiden poisto\n  const deletePerson = (id) => {\n\n    const targetPerson = persons.find(person => person.id === id)\n\n    if(window.confirm(`Do you really want to delete ${targetPerson.name} `)){\n\n    serverComm.deleteData(id).then(response => console.log('Deletion successful'))\n    setPersons(persons.filter(human => human.id !== id))\n\n    setAnnouncement(`Deleted ${targetPerson.name}`)\n    setTimeout(() => {setAnnouncement(null)}, 3000)\n\n    }else{console.log(\"Deletion cancelled\")}\n\n  }\n\n\n  /*Metodi joka hoitaa newname-tilan päivityksen kenttään\n  kirjoitettaessa.\n*/\n  const handleNameWrite = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberWrite = (event) => {\n    setNewNum(event.target.value)\n  }\n\n  const handleFilter = (event) => {\n    setFilterLetters(event.target.value)\n\n    console.log(filterLetters)\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message = {announcement} isError = {isError} />\n\n      <Filterform \n      filterLetters = {filterLetters} \n      changeHandler = {handleFilter}\n      />\n\n\n      <Personform \n      addFunction = {addNewPerson} \n      currentName = {newName} \n      nameChangeHandler = {handleNameWrite} \n      currentNum = {newNum} \n      numChangeHandler = {handleNumberWrite} \n      />\n\n  \n      <h2>Numbers</h2>\n      <Listofpeople list = {persons.filter(person => person.name.slice(0, filterLetters.length) === filterLetters)} deleteFunction = {deletePerson} />\n       \n      \n    </div>\n  )\n\n  \n\n}\n\n\n\n\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}